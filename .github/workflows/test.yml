name: Download test

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: type "deploy" to update Appetize (without it retrieves the version)
        required: false
      appetizeQueue:
        description: Appetize queue to upgrade (main/future/all)
        default: main
        required: true
      sdkPlatform:
        description: Platform to update (android/ios/all)
        default: all
        required: true
      sdkVersion:
        description: SDK version to use for Expo Go (e.g. 42.0.0)
        required: true

jobs:
  test:
    if: contains('all android', github.event.inputs.sdkPlatform)
    runs-on: ubuntu-latest
    steps:
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Resolve Android client
        id: client
        run: |
          curl --silent -o versions.json https://exp.host/--/api/v2/versions

          VERSION=${{ github.event.inputs.sdkVersion }}
          SDK=$(cat versions.json | jq '.sdkVersions["${{github.event.inputs.sdkVersion}}"]')
          ANDROID_VERSION=$(echo $SDK | jq '.androidClientVersion')
          ANDROID_URL=$(echo $SDK | jq '.androidClientUrl')
          
          if [[ -n $SDK ]]; then echo "SDK '$VERSION' not found"; exit 1; fi
          if [[ -n $ANDROID_VERSION ]]; then echo "No Android client version for SDK '$VERSION'"; exit 1; fi
          if [[ -n $ANDROID_URL ]]; then echo "No Android client url for SDK '$VERSION'"; exit 1; fi

          echo "::set-output name=version::$ANDROID_VERSION"
          echo "::set-output name=url::$ANDROID_URL"

      # - name: Validate Android client
      #   uses: actions/github-script@v4
      #   id: client
      #   with:
      #     result-encoding: string
      #     script: |
      #       const { sdkVersions } = require('./versions.json')
      #       const version = '${{ github.event.inputs.sdkVersion }}'

      #       if (!sdkVersions[version]) throw new Error(`Version '${version}' not found.`)
      #       if (!sdkVersions[version].androidClientUrl) throw new Error(`No Android client for '${version}'`)

      #       return JSON.stringify({
      #         version: sdkVersions[version].androidClientVersion,
      #         url: sdkVersions[version].androidClientUrl,
      #       })
      
      - name: Download Android client
        run: curl -o android.apk ${{ steps.client.outputs.url }}
